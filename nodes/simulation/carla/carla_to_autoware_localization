#!/usr/bin/env python
#
# Copyright (c) 2020 Intel Corporation
#
# This work is licensed under the terms of the MIT license.
# For a copy, see <https://opensource.org/licenses/MIT>.
"""
ground truth localization. Publishes the following topics:
    /ground_truth/current_velocty (geometry_msgs::TwistStamped)
    /ground_truth/current_pose    (geometry_msgs::PoseStamped)
"""
import rospy
import math
import tf
from geometry_msgs.msg import PoseStamped, TwistStamped, Pose, Point
from nav_msgs.msg import Odometry
from helpers import LestTransformer


class CarlaToAutowareLocalizer:

    def __init__(self):

        # Node parameters
        self.use_offset = rospy.get_param("~use_offset", default=True)
        self.role_name = rospy.get_param('/carla/role_name', default='ego_vehicle')

        # Publishers
        self.pose_pub = rospy.Publisher(
            '/ground_truth/current_pose', PoseStamped, queue_size=1)
        self.twist_pub = rospy.Publisher(
            '/ground_truth/current_velocity', TwistStamped, queue_size=1)

        # Internal paramters
        self.lest_transformer = LestTransformer()
        self.br = tf.TransformBroadcaster()
        self.tf_listener = tf.TransformListener()

        # Subscribers
        rospy.Subscriber('/carla/odometry',
                         Odometry, self.odometry_callback)
        
        # NOTE: Difference given by carla's map origin and utm projection
        # --> -7.2227463510935195 -339.4496575007215
        # Whereas:
        # Ego and Map origin align at -4.8857463510935195 -343.446575007215

        self.init_position = Point(4.8857, 343.4465, 35)
        self.init_orientation = None


    def odometry_callback(self, data):
        """
        callback odometry
        """
        
        position = data.pose.pose.position
        orientation = data.pose.pose.orientation

        # Odometry Pose
        pose = PoseStamped()
        pose.header = data.header
        pose.pose.position = position
        pose.pose.orientation = orientation

        if self.init_orientation is None:
            self.init_orientation = orientation

        # Publish Transform
        # NOTE: Need to add correct offset via UTM transformer
        self.br.sendTransform((pose.pose.position.x - self.init_position.x, pose.pose.position.y - self.init_position.y, pose.pose.position.z - self.init_position.z),
                              (pose.pose.orientation.x, pose.pose.orientation.y, pose.pose.orientation.z, pose.pose.orientation.w),
                               rospy.Time.now(),
                               self.role_name, '/map')

        # Twist
        linear = data.twist.twist.linear
        angular = data.twist.twist.angular

        # Publish current velocity
        twist = TwistStamped()
        twist.header = data.header
        twist.header.frame_id = "base_link"     # Twist should be in base_link
                                                # https://answers.ros.org/question/341161/reference-frames-of-odometry-message/
        twist.twist.linear.x = math.sqrt(linear.x**2 + linear.y**2 + linear.z**2)
        twist.twist.angular = angular
        self.twist_pub.publish(twist)


        current_pose = PoseStamped()
        current_pose.header.frame_id = "base_link"
        current_pose.header.stamp = pose.header.stamp
        current_pose.pose.orientation.x = 0
        current_pose.pose.orientation.y = 0
        current_pose.pose.orientation.z = 0
        current_pose.pose.orientation.w = 1

        # Publish current pose
        try:
            self.tf_listener.lookupTransform("/map", current_pose.header.frame_id, rospy.Time.now())

            # Should avoid wait for transform
            # self.tf_listener.waitForTransform("/map", current_pose.header.frame_id,
            #                                   current_pose.header.stamp, rospy.Duration(1.0))
            current_pose = self.tf_listener.transformPose("/map", current_pose)

            self.pose_pub.publish(current_pose)
        except (tf.LookupException, tf.ConnectivityException, tf.ExtrapolationException, Exception) as e:
            rospy.logwarn("[%s] TF Failure transforming pose from base_link to map:\r\n %s"%(rospy.get_name(), e))
        

    def run(self):
        rospy.spin()


if __name__ == '__main__':
    # log_level set to errors only
    rospy.init_node('carla_to_autoware_localization', log_level=rospy.ERROR, anonymous=False)
    node = CarlaToAutowareLocalizer()
    node.run()

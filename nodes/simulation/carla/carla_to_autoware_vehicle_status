#!/usr/bin/env python
#
# Copyright (c) 2020 Intel Corporation
#
# This work is licensed under the terms of the MIT license.
# For a copy, see <https://opensource.org/licenses/MIT>.
"""
receive :CarlaEgoVehicleStatus and publishes autoware_msgs::VehicleStatus
"""
import math
import rospy
from carla_msgs.msg import CarlaEgoVehicleInfo
from carla_msgs.msg import CarlaEgoVehicleStatus
from autoware_msgs.msg import VehicleStatus, Gear


class CarlaToAutowareVehicleStatus:

    def __init__(self):

        # Node parameters
        role_name = rospy.get_param('/carla/role_name', default='ego_vehicle')

        # Subscribers
        rospy.Subscriber('/carla/{}/vehicle_status'.format(role_name), CarlaEgoVehicleStatus,
                         self.vehicle_status_callback)
        rospy.Subscriber('/carla/{}/vehicle_info'.format(role_name), CarlaEgoVehicleInfo,
                         self.vehicle_info_callback)

        # Publishers
        self.vehicle_status_pub = rospy.Publisher(
            'vehicle_status', VehicleStatus, queue_size=1)

        # Internal parameters
        self.vehicle_info = None

    def vehicle_info_callback(self, data):
        """
        callback for vehicle info
        """
        self.vehicle_info = data

    def vehicle_status_callback(self, data):
        """
        callback for vehicle status
        """
        if self.vehicle_info is None:
            return
        status = VehicleStatus()
        status.header = data.header
        status.speed = data.velocity

        # calculate max steering angle
        max_steering_angle = math.radians(70)
        # get max steering angle (use smallest non-zero value of all wheels)
        for wheel in self.vehicle_info.wheels:
            if wheel.max_steer_angle and wheel.max_steer_angle < max_steering_angle:
                max_steering_angle = wheel.max_steer_angle

        status.angle = data.control.steer * math.degrees(max_steering_angle)
        status.speed = data.velocity * 3.6  # speed is expected in km/h

        if data.control.reverse:
            status.current_gear.gear = Gear.REVERSE
        else:
            status.current_gear.gear = Gear.DRIVE

        if data.control.manual_gear_shift:
            status.drivemode = VehicleStatus.MODE_MANUAL
        else:
            status.drivemode = VehicleStatus.MODE_AUTO

        self.vehicle_status_pub.publish(status)

    def run(self):
        rospy.spin()


if __name__ == '__main__':
    rospy.init_node('carla_to_autoware_vehicle_status', log_level=rospy.INFO, anonymous=False)
    node = CarlaToAutowareVehicleStatus()
    node.run()

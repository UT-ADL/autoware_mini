#!/usr/bin/env python

import rospy
from math import sin, cos, atan2, atan, radians, degrees, pi
from sensor_msgs.msg import NavSatFix
from novatel_oem7_msgs.msg import INSPVA, BESTPOS
from nav_msgs.msg import Odometry
import pyproj


class CarlaToNovaltel():
    def __init__(self):
        
        # Subscribers
        rospy.Subscriber("/carla/gnss", NavSatFix, self.gnss_callback)
        rospy.Subscriber("/carla/gnss_forward", NavSatFix, self.gnss_forward_callback)
        rospy.Subscriber("/carla/odometry", Odometry, self.odometry_callback)

        # Publishers
        self.inspva_pub = rospy.Publisher("/novatel/oem7/inspva", INSPVA, queue_size=10)
        self.bestpos_pub = rospy.Publisher("/novatel/oem7/bestpos", BESTPOS, queue_size=10)

        # Internal parameters
        self.geodesic = pyproj.Geod(ellps='WGS84')
        self.velocity = None
        self.gnss_forward_data = None

    def odometry_callback(self, data):
        """
        callback odometry
        """
        self.velocity = float(data.twist.twist.linear.x)

    def gnss_forward_callback(self, data):
        """
        callback GNSS sensor (placed ahead of the car)
        """
        self.gnss_forward_data = data

    def gnss_callback(self, data):
        """
        callback GNSS sensor
        """

        if self.velocity is None:
            print("No velocity")
            return

        if self.gnss_forward_data is None:
            print("No gnss_forward_data")
            return
        
        bestposMsg = BESTPOS()
        bestposMsg.header.stamp = data.header.stamp

        msg = INSPVA()
        msg.header.stamp = data.header.stamp
        msg.status.status = 3 #"INS_SOLUTION_GOOD"
        msg.latitude = data.latitude
        msg.longitude = data.longitude

        # NOTE: this is wrong, we are using altitude instead of height because the
        # CARLA simulator doesn't give us height
        msg.height = data.altitude
        msg.roll = 0
        msg.pitch = 0 
        msg.north_velocity = self.velocity
        msg.east_velocity = 0.0

        lat_init = radians(data.latitude)
        lat_final = radians(self.gnss_forward_data.latitude)

        lon_init = radians(data.longitude)
        lon_final = radians(self.gnss_forward_data.longitude)

        # NOTE: Azimuth angle is required. CARLA simulator doesn't provide it.
        # Method 1
        fwd_azimuth, back_azimuth, distance = self.geodesic.inv(lon_init, lat_init, lon_final, lat_final)
        msg.azimuth = fwd_azimuth

        # delta_lat = radians(lat_final - lat_init)
        # delta_lon = radians(lon_final - lon_init)

        # Method 2
        # msg.azimuth = degrees(atan2(delta_lon, delta_lat)) % 360 

        # Method 3
        # msg.azimuth = degrees(atan2(cos(lat_init)*sin(lat_final) - sin(lat_init)*cos(lat_final)*cos(delta_lon), sin(delta_lon)*cos(lat_final))) % 360
        # msg.azimuth %= 360

        # Method 4
        # azimuth = (pi * .5) - atan(delta_lat / delta_lon)
        # if (delta_lon > 0):
        #     pass
        # elif (delta_lon < 0):
        #     azimuth = azimuth + pi
        # elif (delta_lat < 0):
        #     azimuth = pi
        # else:
        #     azimuth = 0
        # msg.azimuth = degrees(azimuth)

        self.inspva_pub.publish(msg)
        self.bestpos_pub.publish(bestposMsg)


    def run(self):
        rospy.spin()

if __name__ == '__main__':
    rospy.init_node('carla_to_novatel_converter', log_level=rospy.INFO, anonymous=False)
    node = CarlaToNovaltel()
    node.run()

<?xml version="1.0"?>
<launch>
    <arg name="detector"            default="lidar_cluster"     doc="lidar_cluster,lidar_sfa,lidar_vella,radar,lidar_cluster_radar_fusion,lidar_sfa_radar_fusion,carla,sim" />
    <arg name="lanelet2_map_name"   default="tartu_demo.osm"    doc="for carla traffic light detector" />
    <arg name="use_lidar_center"    default="true"              doc="use velodyne lidar"/>
    <arg name="use_lidar_front"     default="false"             doc="use velodyne lidar"/>
    <arg name="tracker"             default="ema"               doc="none, ema" />
    <arg name="predictor"           default="none"              doc="none, naive" />
    <arg name="more_visualizations" default="false"             doc="By default only visualize final detections" />

    <group if="$(eval 'lidar' in detector)" ns="lidar">
        <remap unless="$(eval 'fusion' in detector)" from="detected_objects" to="/detection/detected_objects" />
        <group if="$(eval 'lidar_cluster' in detector)">
            <group if="$(arg use_lidar_center)" ns="center">
                <node type="ground_removal.py" name="ground_removal" pkg="autoware_mini" output="screen" required="true">
                    <remap from="points_raw" to="/lidar_center/points_raw" />
                    <remap unless="$(arg use_lidar_front)" from="points_ground" to="/detection/lidar/points_ground" />
                    <remap unless="$(arg use_lidar_front)" from="points_no_ground" to="/detection/lidar/points_no_ground" />
                </node>
            </group>
            <group if="$(arg use_lidar_front)" ns="front">
                <node pkg="nodelet" type="nodelet" name="pcl_manager" args="manager" output="screen" required="true" />
                <node pkg="nodelet" type="nodelet" name="crop_box" args="load pcl/CropBox pcl_manager" output="screen" required="true">
                    <remap from="~input" to="/lidar_front/points" />
                    <remap from="~output" to="/lidar_front/points_filtered" />
                </node>
                <node type="ground_removal.py" name="ground_removal" pkg="autoware_mini" output="screen" required="true">
                    <remap from="points_raw" to="/lidar_front/points_filtered" />
                    <remap unless="$(arg use_lidar_center)" from="points_ground" to="/detection/lidar/points_ground" />
                    <remap unless="$(arg use_lidar_center)" from="points_no_ground" to="/detection/lidar/points_no_ground" />
                </node>
            </group>
            <group if="$(eval use_lidar_center and use_lidar_front)">
                <node type="points_concatenator.py" name="points_concatenator" pkg="autoware_mini" output="screen" required="true">
                    <remap from="points1" to="center/points_no_ground" />
                    <remap from="points2" to="front/points_no_ground" />
                    <remap from="points_concatenated" to="points_no_ground" />
                </node>
            </group>
            <node type="points_clusterer.py" name="points_clusterer" pkg="autoware_mini" output="screen" required="true" />
            <node type="cluster_detector.py" name="cluster_detector" pkg="autoware_mini" output="screen" required="true" />
        </group>

        <node if="$(eval 'lidar_sfa' in detector)" pkg="autoware_mini" type="sfa_detector.py" name="sfa_detector" output="screen" required="true">
            <param name="onnx_path"  value="$(find autoware_mini)/config/sfa/nulyaronar2_02_30.onnx"/>
            <remap if="$(eval use_lidar_center and not use_lidar_front)" from="points_raw" to="/lidar_center/points_raw" />
            <remap if="$(eval use_lidar_front and not use_lidar_center)" from="points_raw" to="/lidar_front/points" />
        </node>

        <!-- Velodyne Vella detections -->
        <group if="$(eval 'lidar_vella' in detector)">
            <!--node pkg="autoware_mini" type="vella_detector.sh" name="vella_detector" args="2.11
            $(find autoware_mini)/config/vella/vella_extrinsics.yaml /localization/odometry 2" output="screen" required="true" /-->
            <node pkg="autoware_mini" type="vella_detector.py" name="vella_detector" output="screen" required="true" />
        </group>

        <group if="$(arg more_visualizations)">
            <!--visualizer for lidar detections-->
            <node if="$(eval 'fusion' in detector)" type="detected_objects_visualizer.py" name="lidar_objects_visualizer" pkg="autoware_mini" output="screen" required="true" />
        </group>
    </group>

    <group if="$(eval 'radar' in detector)" ns="radar">
        <remap unless="$(eval 'fusion' in detector)" from="detected_objects" to="/detection/detected_objects" />
        <node pkg="autoware_mini" type="radar_detector.py" name="radar_detector" output="screen" required="true"/>
        <group if="$(arg more_visualizations)">
            <!-- visualizer for radar detections-->
            <node if="$(eval 'fusion' in detector)" type="detected_objects_visualizer.py" name="radar_objects_visualizer" pkg="autoware_mini" output="screen" required="true" />
        </group>
    </group>

    <node if="$(eval 'radar_fusion' in detector)" pkg="autoware_mini" type="lidar_radar_fusion.py" name="lidar_radar_fusion" output="screen" required="true" />
    
    <!-- Carla's ground truth objects -->
    <node if="$(eval detector=='carla')" pkg="autoware_mini" type="carla_detector.py" name="carla_detector" output="screen" required="true" />

    <!-- Obstacle simulator -->
    <node if="$(eval detector=='sim')" pkg="autoware_mini" type="obstacle_simulation.py" name="obstacle_simulation" output="screen" required="true" />

    <!-- Detected objects visualizer -->
    <node if="$(arg more_visualizations)" type="detected_objects_visualizer.py" name="detected_objects_visualizer" pkg="autoware_mini" output="screen" required="true" />

    <group if="$(eval tracker=='ema')">
        <remap if="$(eval predictor=='none')" from="tracked_objects" to="final_objects" />
        <node type="ema_tracker.py" name="ema_tracker" pkg="autoware_mini" output="screen" required="true" />
        <node if="$(arg more_visualizations)" type="detected_objects_visualizer.py" name="tracked_objects_visualizer" pkg="autoware_mini" output="screen" required="true">
            <remap from="detected_objects" to="tracked_objects" />
            <remap from="detected_objects_markers" to="tracked_objects_markers" />
        </node>
    </group>
    <node if="$(eval tracker=='none')" pkg="topic_tools" type="relay" args="detected_objects tracked_objects" name="detected_objects_relay" output="screen" required="true" />

    <group if="$(eval predictor=='naive')">
        <remap from="predicted_objects" to="final_objects" />
        <node type="naive_predictor.py" name="naive_predictor" pkg="autoware_mini" output="screen" required="true" />
        <node if="$(arg more_visualizations)" type="detected_objects_visualizer.py" name="predicted_objects_visualizer" pkg="autoware_mini" output="screen" required="true">
            <remap from="detected_objects" to="predicted_objects" />
            <remap from="detected_objects_markers" to="predicted_objects_markers" />
        </node>
    </group>
    <node if="$(eval predictor=='none')" pkg="topic_tools" type="relay" args="tracked_objects final_objects" name="tracked_objects_relay" output="screen" required="true" />

    <!-- Final objects visualizer -->
    <node type="detected_objects_visualizer.py" name="final_objects_visualizer" pkg="autoware_mini" output="screen" required="true">
        <remap from="detected_objects" to="final_objects" />
        <remap from="detected_objects_markers" to="final_objects_markers" />
    </node>

</launch>
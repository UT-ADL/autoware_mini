<launch>
    <arg name="use_lidar_center"        default="true" />
    <arg name="use_lidar_front"         default="true" />
    <arg name="use_radar"               default="false" />
    <arg name="detection_method"        default="clustering" doc="{clustering, pointpillars, vella}" />

    <!-- Lidar(s) -->
    <group if="$(eval (use_lidar_center or use_lidar_front) and (arg('detection_method')=='clustering'))">
        <!-- Center lidar ground removal -->
        <group if="$(arg use_lidar_center)" ns="lidar_center">
            <remap unless="$(arg use_lidar_front)" from="points_no_ground" to="/detection/lidar/points_no_ground" />
            <node pkg="autoware_mini" type="ground_removal.py" name="ground_removal" output="log" />
        </group>

        <!-- Front lidar ground removal -->
        <group if="$(arg use_lidar_front)" ns="lidar_front">
            <remap unless="$(arg use_lidar_center)" from="points_no_ground" to="/detection/lidar/points_no_ground" />
            <node pkg="autoware_mini" type="ground_removal.py" name="ground_removal" output="log" />
        </group>
    </group>

    <group ns="detection">
        <group if="$(eval use_lidar_center or use_lidar_front)" ns="lidar">
            <group if="$(eval arg('detection_method')=='clustering')">

                <!-- Lidar merging node -->
                <!--Need a pcd concatenation node here or do concatenation before ground removal   -->

                <!-- Clustering -->
                <node type="points_clusterer.py" name="points_clusterer" pkg="autoware_mini" output="screen" required="true" />
                <node type="cluster_detector.py" name="cluster_detector" pkg="autoware_mini" output="screen" required="true" />
                <node pkg="autoware_mini" type="detected_objects_visualizer.py" name="objects_visualizer" output="screen"  />
            </group>

            <!-- Vella detections -->
            <group if="$(eval arg('detection_method')=='vella' and use_lidar_center)">
                <node pkg="autoware_mini" type="vella_to_autoware_converter.py" name="vella_to_autoware_converter" output="screen">
                    <remap if="$(arg use_radar)" from="objects" to="tracked_objects" />
                    <remap unless="$(arg use_radar)" from="objects" to="/detection/objects" />
                </node>
                <node pkg="autoware_mini" type="odom_publisher.py" name="odom_publisher" output="screen" />
<!--                 <node pkg="autoware_mini" type="vella_detector.sh" name="vella_detector" args ="2.11 -->
<!--                    $(find autoware_mini)/config/vella/vella_extrinsics.yaml  /odom 2 " output="screen"/> -->

                <node if="$(arg use_radar)" pkg="detected_objects_visualizer" type="visualize_detected_objects" name="vella_objects_viz" output="screen">
                    <remap from="objects" to="tracked_objects" />
                </node>
                <node unless="$(arg use_radar)" pkg="autoware_mini" type="detected_objects_visualizer.py" name="vella_objects_viz" output="screen" />
            </group>

        </group>
    </group>


</launch>

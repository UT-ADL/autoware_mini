<?xml version="1.0"?>
<launch>
    <arg name="detector"            default="lidar_cluster"   doc="lidar_cluster,lidar_sfa,lidar_vella,radar,lidar_radar_fusion,carla,sim" />
    <arg name="tfl_detector"        default="none"      doc="carla, mqtt, camera, mqtt_camera_fusion" />
    <arg name="lanelet2_map_name"   default="tartu_demo_l_c_wp.osm" doc="for carla traffic light detector" />

    <group ns="detection">
        <group if="$(eval 'lidar' in detector)" ns="lidar">
            <remap from="points_raw" to="/lidar_center/points_raw" />
            <remap unless="$(eval detector=='lidar_radar_fusion')" from="detected_objects" to="/detection/detected_objects" />

            <include if="$(eval detector=='lidar_cluster' or detector=='lidar_radar_fusion')" file="$(find autoware_mini)/launch/detection/lidar_cluster.launch" />

            <node if="$(eval detector=='lidar_sfa')" pkg="autoware_mini" type="sfa_detector.py" name="sfa_detector" output="screen" required="true">
                <param name="onnx_path"  value="$(find autoware_mini)/config/sfa/kilynuaron_model.onnx"/>
            </node>

            <!-- Velodyne Vella detections -->
            <group if="$(eval detector=='lidar_vella')">
                <!--node pkg="autoware_mini" type="vella_detector.sh" name="vella_detector" args="2.11
                $(find autoware_mini)/config/vella/vella_extrinsics.yaml /localization/odometry 2" output="screen" required="true" /-->
                <node pkg="autoware_mini" type="vella_detector.py" name="vella_detector" output="screen" required="true" />
            </group>

            <!--visualizer for lidar detections-->
            <node if="$(eval detector=='lidar_radar_fusion')" type="detected_objects_visualizer.py" name="lidar_objects_visualizer" pkg="autoware_mini" output="screen" required="true" />
        </group>

        <group if="$(eval 'radar' in detector)" ns="radar">
            <remap unless="$(eval detector=='lidar_radar_fusion')" from="detected_objects" to="/detection/detected_objects" />
            <node pkg="autoware_mini" type="radar_detector.py" name="radar_detector" output="screen" required="true"/>
            <!-- visualizer for radar detections-->
            <node if="$(eval detector=='lidar_radar_fusion')" type="detected_objects_visualizer.py" name="radar_objects_visualizer" pkg="autoware_mini" output="screen" required="true" />
        </group>

        <node if="$(eval detector=='lidar_radar_fusion')" pkg="autoware_mini" type="lidar_radar_fusion.py" name="lidar_radar_fusion" output="screen" required="true" />
        
        <!-- Carla's ground truth objects -->
        <node if="$(eval detector=='carla')" pkg="autoware_mini" type="carla_detector.py" name="carla_detector" output="screen" required="true" />

        <!-- Obstacle simulator -->
        <node if="$(eval detector=='sim')" pkg="autoware_mini" type="obstacle_simulation.py" name="obstacle_simulation" output="screen" required="true" />

        <!-- Detected objects visualizer for final objects -->
        <node type="detected_objects_visualizer.py" name="detected_objects_visualizer" pkg="autoware_mini" output="screen" required="true" />

        <!-- Traffic Light Detection -->
        <include file="$(find autoware_mini)/launch/detection/traffic_light_detection.launch">
            <arg name="tfl_detector"        value="$(arg tfl_detector)" />
            <arg name="lanelet2_map_name"   value="$(arg lanelet2_map_name)" />
        </include>

        <rosparam command="load" file="$(find autoware_mini)/config/detection.yaml"/>

    </group>

</launch>
<?xml version="1.0"?>
<launch>
    <arg name="detector"            default="cluster"   doc="cluster,sfa,vella,carla,sim" />
    <arg name="tfl_detector"        default="none"      doc="carla, mqtt" />
    <arg name="lanelet2_map_name"   default="tartu_demo_l_c_wp.osm" doc="for carla traffic light detector" />
    <arg name="use_lidar_center"    default="true"      doc="whether to use center lidar for detection" />
    <arg name="use_radar"           default="true"      doc="whether to use radar for detection" />

    <group ns="detection">
        <group if="$(arg use_lidar_center)" ns="lidar">
            <remap from="points_raw" to="/lidar_center/points_raw" />
            <remap unless="$(arg use_radar)" from="detected_objects" to="/detection/detected_objects" />

            <include if="$(eval arg('detector')=='cluster')" file="$(find autoware_mini)/launch/detection/lidar_cluster.launch" />

            <node if="$(eval arg('detector')=='sfa')" pkg="autoware_mini" type="sfa_detector.py" name="sfa_detector" output="screen" required="true">
                <param name="onnx_path"  value="$(find autoware_mini)/config/sfa/kilynuaron_model.onnx"/>
            </node>

            <!--visualizer for lidar detections-->
            <node type="detected_objects_visualizer.py" name="lidar_objects_visualizer" pkg="autoware_mini" output="screen" required="true" />

            <!-- Velodyne Vella detections -->
            <group if="$(eval arg('detector')=='vella')">
                <!--node pkg="autoware_mini" type="vella_detector.sh" name="vella_detector" args="2.11
                $(find autoware_mini)/config/vella/vella_extrinsics.yaml /localization/odometry 2" output="screen" required="true" /-->
                <node pkg="autoware_mini" type="vella_detector.py" name="vella_detector" output="screen" required="true" />
            </group>
        </group>

        <group if="$(arg use_radar)" ns="radar">
            <remap unless="$(arg use_lidar_center)" from="detected_objects" to="/detection/detected_objects"/>
            <node pkg="autoware_mini" type="radar_detector.py" name="radar_detector" output="screen" required="true"/>
            <!-- visualizer for radar detections-->
            <node type="detected_objects_visualizer.py" name="radar_objects_visualizer" pkg="autoware_mini" output="screen" required="true" />
        </group>

        <node if="$(eval use_radar and use_lidar_center)" pkg="autoware_mini" type="lidar_radar_fusion.py" name="lidar_radar_fusion" output="screen" required="true" />
        
        <!-- Carla's ground truth objects -->
        <node if="$(eval arg('detector')=='carla')" pkg="autoware_mini" type="carla_detector.py" name="carla_detector" output="screen" required="true" />

        <!-- Carla's ground truth traffic lights -->
        <node if="$(eval arg('tfl_detector')=='carla')" pkg="autoware_mini" type="carla_traffic_light_detector.py" name="carla_traffic_light_detector" output="screen" required="true">
            <param name="lanelet2_map_name" value="$(find autoware_mini)/data/lanelet2/$(arg lanelet2_map_name)" />
        </node>

        <!-- MQTT traffic light detector -->
        <node if="$(eval arg('tfl_detector')=='mqtt')" pkg="autoware_mini" type="mqtt_traffic_light_detector.py" name="mqtt_traffic_light_detector" output="screen" required="true">
            <param name="lanelet2_map_name" value="$(find autoware_mini)/data/lanelet2/$(arg lanelet2_map_name)" />
        </node>

        <!-- Obstacle simulator -->
        <node if="$(eval arg('detector')=='sim')" pkg="autoware_mini" type="obstacle_simulation.py" name="obstacle_simulation" output="screen" required="true" />

        <!-- Detected objects visualizer for final objects-->
        <node type="detected_objects_visualizer.py" name="detected_objects_visualizer" pkg="autoware_mini" output="screen" required="true" />

        <rosparam command="load" file="$(find autoware_mini)/config/detection.yaml"/>
    </group>

</launch>